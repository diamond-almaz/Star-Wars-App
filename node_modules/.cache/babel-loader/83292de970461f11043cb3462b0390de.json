{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/almazsaripov/WebstormProjects/test-from-hh/src/components/Planets/PlanetsDetails/planetsDetails.js\";\nimport React from 'react';\nimport * as axios from 'axios';\n\nclass PlanetsDetails extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      films: [],\n      residents: []\n    };\n  }\n\n  componentDidMount() {\n    let newArr = [];\n    Promise.all(this.props.planetInfo.films.map(i => {\n      axios.get(i).then(res => {\n        newArr.push(res.data.title);\n      });\n    })).then(() => {\n      this.setState({\n        films: newArr\n      });\n    });\n  }\n\n  render() {\n    let newArr;\n\n    if (this.state.films.length !== 0) {\n      debugger;\n      newArr = this.state.films.map(i => {\n        /*#__PURE__*/\n        _jsxDEV(\"div\", {\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, this);\n      });\n    }\n\n    console.log(this.state.films.length);\n    console.log(this.state.films);\n    let {\n      climate,\n      created,\n      diameter,\n      edited,\n      films,\n      gravity,\n      name,\n      orbital_period,\n      population,\n      residents,\n      rotation_period,\n      surface_water,\n      terrain\n    } = this.props.planetInfo;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Climate: \", climate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Created: \", created]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Diameter: \", diameter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Edited: \", edited]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), this.state.films.length != 0 && newArr, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Gravity: \", gravity]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Orbital period: \", orbital_period]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"population: \", population]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Rotation_period: \", rotation_period]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Surface_water: \", surface_water]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Terrain: \", terrain]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"population: \", population]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PlanetsDetails;","map":{"version":3,"sources":["/Users/almazsaripov/WebstormProjects/test-from-hh/src/components/Planets/PlanetsDetails/planetsDetails.js"],"names":["React","axios","PlanetsDetails","Component","state","films","residents","componentDidMount","newArr","Promise","all","props","planetInfo","map","i","get","then","res","push","data","title","setState","render","length","console","log","climate","created","diameter","edited","gravity","name","orbital_period","population","rotation_period","surface_water","terrain"],"mappings":"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","sourcesContent":["import React from 'react'\nimport * as axios from 'axios'\n\nclass PlanetsDetails extends React.Component {\n\n    state={\n        films: [],\n        residents: []\n    }\n\n\n    componentDidMount() {\n        let newArr=[]\n        Promise.all(this.props.planetInfo.films.map(i=>{\n            axios.get(i).then(res=>{\n                newArr.push(res.data.title)\n            })\n        })).then(()=> {\n            this.setState({\n                films: newArr\n            })\n        })\n\n\n    }\n\n    render() {\n        let newArr;\n        if (this.state.films.length!==0) {\n            debugger;\n            newArr=this.state.films.map(i=>{\n                <div>{i}</div>\n            })}\n        console.log(this.state.films.length)\n        console.log(this.state.films)\n        let {\n            climate, created, diameter,\n            edited, films, gravity, name,\n            orbital_period, population,residents,\n            rotation_period, surface_water, terrain,\n        } = this.props.planetInfo\n        return (\n            <div>\n                <h3>{name}</h3>\n                <div>Climate: {climate}</div>\n                <div>Created: {created}</div>\n                <div>Diameter: {diameter}</div>\n                <div>Edited: {edited}</div>\n                {this.state.films.length!=0 && newArr}\n                {/*<div>Films: {films}</div>*/}\n                <div>Gravity: {gravity}</div>\n                <div>Orbital period: {orbital_period}</div>\n                <div>population: {population}</div>\n                {/*<div>Residents: {residents}</div>*/}\n                <div>Rotation_period: {rotation_period}</div>\n                <div>Surface_water: {surface_water}</div>\n                <div>Terrain: {terrain}</div>\n                <div>population: {population}</div>\n            </div>\n        )\n    }\n}\n\nexport default PlanetsDetails;"]},"metadata":{},"sourceType":"module"}